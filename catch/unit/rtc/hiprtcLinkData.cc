/*
 * Copyright (c) 2022 Advanced Micro Devices, Inc. All rights reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 * */

#include <hip_test_common.hh>

#include "hiprtcHelper.hpp"
#include <hip/hiprtc.h>
#include <hip/hip_runtime.h>

static constexpr auto vcpy{
  R"(
    extern "C" __global__ void vcpy_kernel(float* a, float* b) {
      int tx = __ockl_get_local_id(0);
      b[tx] = a[tx];
    }
)"};

bool TestAddLinkData(char* bit_code_ptr, size_t bit_code_size,
                     hiprtcJITInputType input_type, void** cuOut, size_t* out_size) {

    hiprtcLinkState hiprtc_link_state;
    hiprtcJIT_option options[6];
    void* option_vals[6];
    float wall_time;
    size_t log_size = 8192;
    char error_log[8192];
    char info_log[8192];

    options[0] = HIPRTC_JIT_WALL_TIME;
    option_vals[0] = (void*)(&wall_time);

    options[1] = HIPRTC_JIT_INFO_LOG_BUFFER;
    option_vals[1] = (void*)info_log;

    options[2] = HIPRTC_JIT_INFO_LOG_BUFFER_SIZE_BYTES;
    option_vals[2] = (void*)(log_size);

    options[3] = HIPRTC_JIT_ERROR_LOG_BUFFER;
    option_vals[3] = (void*)error_log;

    options[4] = HIPRTC_JIT_ERROR_LOG_BUFFER_SIZE_BYTES;
    option_vals[4] = (void*)(log_size);

    options[5] = HIPRTC_JIT_LOG_VERBOSE;
    option_vals[5] = (void*)1;

    if (HIPRTC_SUCCESS != hiprtcLinkCreate(6, options, option_vals, &hiprtc_link_state)) {
      std::cout<<"hipLinkCreate failed "<<std::endl;
      return false;
    }

    std::string link_data_name("link_data");
    if (HIPRTC_SUCCESS != hiprtcLinkAddData(hiprtc_link_state, input_type, bit_code_ptr,
                                            bit_code_size, link_data_name.c_str(), 0, 0, 0)) {
      std::cout<<"hipLinkAddFile failed "<<std::endl;
      return false;
    }

    if (HIPRTC_SUCCESS != hiprtcLinkComplete(hiprtc_link_state, cuOut, out_size)) {
      std::cout<<"hipLinkComplete failed "<<std::endl;
      return false;
    }

    if (HIPRTC_SUCCESS != hiprtcLinkDestroy(hiprtc_link_state)) {
      std::cout<<"hipLinkDestroy failed "<<std::endl;
      return false;
    }

    return true;
}

TEST_CASE("Unit_hiprtcLinkData_bitcode") {
  // Create a bit code via RTC Compile APIs with fgpu-rdc options.
  char* bit_code = nullptr;
  size_t bit_code_size = 0;
  REQUIRE(TestCompileRDC(&bit_code, &bit_code_size, vcpy, "VectorCopy"));

  // Test the link file API
  void* executable = nullptr;
  size_t exe_size = 0;
  REQUIRE(TestAddLinkData(bit_code, bit_code_size, HIPRTC_JIT_INPUT_LLVM_BITCODE,
                          &executable, &exe_size));

  // Test the executable generated by the API.
  REQUIRE(TestModuleLoadData(executable));
}

